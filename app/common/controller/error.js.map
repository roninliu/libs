{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\common\\controller\\error.js"
    ],
    "names": [],
    "mappings": "AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIE;;;;;mBAKA,Y,yBAAa,M,EAAO;AAAA;;AAElB;AACA,QAAG,MAAM,GAAN,KAAc,YAAjB,EAA8B;AAC5B,WAAK,IAAL,CAAU,KAAV,GAAkB,IAAlB;AACD;;AAED,QAAI,cAAc,KAAK,MAAL,CAAY,OAAZ,CAAlB;AACA,QAAI,UAAU,KAAK,IAAL,CAAU,KAAV,IAAmB,KAAK,IAAL,CAAU,KAAV,CAAgB,OAAnC,IAA8C,EAA5D;AACA,QAAG,KAAK,OAAL,EAAH,EAAkB;AAAA;;AAChB,aAAO,KAAK,KAAL,sBACJ,YAAY,GADR,IACc,MADd,SAEJ,YAAY,GAFR,IAEc,OAFd,UAAP;AAID,KALD,MAKM,IAAG,KAAK,MAAL,EAAH,EAAiB;AACrB,aAAO,KAAK,IAAL,CAAU,MAAV,EAAkB,OAAlB,CAAP;AACD;;AAED,QAAI,SAAS,QAAb;AACA,QAAG,MAAM,IAAN,KAAe,MAAM,WAAxB,EAAoC;AAClC,eAAS,KAAK,MAAL,CAAY,gBAAZ,CAAT;AACD;AACD,QAAI,OAAU,MAAV,eAA0B,MAA1B,UAAJ;AACA,QAAI,UAAU,KAAK,MAAL,CAAY,KAAZ,CAAd;AACA,cAAU,MAAM,MAAN,CAAa,EAAb,EAAiB,OAAjB,EAA0B,EAAC,MAAM,MAAP,EAAe,WAAW,GAA1B,EAA1B,CAAV;AACA,SAAK,KAAL,CAAW,IAAX,EAAiB,EAAjB,EAAqB,OAArB,EAA8B,IAA9B,CAAmC,mBAAW;AAC5C,gBAAU,QAAQ,OAAR,CAAgB,eAAhB,EAAiC,OAAjC,CAAV;AACA,aAAK,IAAL,CAAU,QAAQ,YAAlB;AACA,aAAK,GAAL,CAAS,OAAT;AACD,KAJD;AAKD,G;AACD;;;;;;mBAIA,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;AACD;;;;;;mBAIA,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;AACD;;;;;;mBAIA,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;AACD;;;;;;mBAIA,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;AACD;;;;;;mBAIA,U,yBAAY;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD,G;;;EAvE0B,MAAM,UAAN,CAAiB,I",
    "file": "..\\..\\..\\src\\common\\controller\\error.js",
    "sourcesContent": [
        "'use strict';\r\n/**\r\n * error controller\r\n */\r\nexport default class extends think.controller.base {\r\n  /**\r\n   * display error page\r\n   * @param  {Number} status []\r\n   * @return {Promise}        []\r\n   */\r\n  displayError(status){\r\n\r\n    //hide error message on production env\r\n    if(think.env === 'production'){\r\n      this.http.error = null;\r\n    }\r\n\r\n    let errorConfig = this.config('error');\r\n    let message = this.http.error && this.http.error.message || '';\r\n    if(this.isJsonp()){\r\n      return this.jsonp({\r\n        [errorConfig.key]: status,\r\n        [errorConfig.msg]: message\r\n      })\r\n    }else if(this.isAjax()){\r\n      return this.fail(status, message);\r\n    }\r\n\r\n    let module = 'common';\r\n    if(think.mode !== think.mode_module){\r\n      module = this.config('default_module');\r\n    }\r\n    let file = `${module}/error/${status}.html`;\r\n    let options = this.config('tpl');\r\n    options = think.extend({}, options, {type: 'base', file_depr: '_'});\r\n    this.fetch(file, {}, options).then(content => {\r\n      content = content.replace('ERROR_MESSAGE', message);\r\n      this.type(options.content_type);\r\n      this.end(content);\r\n    });\r\n  }\r\n  /**\r\n   * Bad Request \r\n   * @return {Promise} []\r\n   */\r\n  _400Action(){\r\n    return this.displayError(400);\r\n  }\r\n  /**\r\n   * Forbidden \r\n   * @return {Promise} []\r\n   */\r\n  _403Action(){\r\n    return this.displayError(403);\r\n  }\r\n  /**\r\n   * Not Found \r\n   * @return {Promise}      []\r\n   */\r\n  _404Action(){\r\n    return this.displayError(404);\r\n  }\r\n  /**\r\n   * Internal Server Error\r\n   * @return {Promise}      []\r\n   */\r\n  _500Action(){\r\n    return this.displayError(500);\r\n  }\r\n  /**\r\n   * Service Unavailable\r\n   * @return {Promise}      []\r\n   */\r\n  _503Action(){\r\n    return this.displayError(503);\r\n  }\r\n}"
    ]
}